# syntax=docker/dockerfile:1.3-labs
FROM ubuntu:20.04 AS ubuntu-tiros-foxy
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=foxy
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

RUN echo . \
    && echo 'Etc/UTC' > /etc/timezone \
    && ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \
    && apt update && apt upgrade -y \
    && apt install -y --no-install-recommends \
    tzdata \
    libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
    libgstreamer1.0-0 \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gir1.2-gst-rtsp-server-1.0 \
    ninja-build \
    dirmngr \
    gnupg2 \
    curl \
    build-essential \
    git \
    wget \
    vim \
    tmux \
    gdb \
    iputils-ping \
    usbutils \
    ncurses-dev \
    libyaml-cpp-dev \
    rsync \
    strace \
    sysstat \
    gdb \
    net-tools \
    dialog \
    chrony \
    nfs-common \
    corkscrew \
    v4l-utils \
    && echo .

RUN echo . \
    && echo "deb http://packages.ros.org/ros2/ubuntu focal main" > /etc/apt/sources.list.d/ros2-latest.list \
    && curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add - \
    && apt update && apt upgrade -y \
    && apt install -y --no-install-recommends \
    unzip \
    libsm6 \
    libxext6 \
    libxrender1 \
    cmake \
    libprotobuf-dev \
    protobuf-compiler \
    libprotoc-dev \
    graphviz \
    swig \
    curl \
    vim \
    git \
    wget \
    gdb \
    nano \
    zip \
    pkg-config \
    libgtk-3-dev \
    libyaml-cpp-dev \
    autotools-dev \
    autoconf \
    automake \
    libtool \
    ros-foxy-ros-base=0.9.2-1* \
    ros-foxy-rmw-cyclonedds-cpp \
    ros-foxy-cv-bridge \
    ros-foxy-image-transport \
    ros-foxy-camera-info-manager \
    libeigen3-dev \
    python3-opencv \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    python3-rosdep \
    python3-vcstool \
    python3-pip \
    && python3 -m pip install --upgrade pip \
    && python3 -m pip install \
        rosbags \
        meson \
        configparser \
        argparse \
    && python3 -m pip install rosbags \
    && echo .

RUN rosdep init && \
    rosdep update --rosdistro ${ROS_DISTRO}

RUN colcon mixin add default \
      https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update && \
    colcon metadata add default \
      https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
    colcon metadata update

WORKDIR /root/src
RUN echo . \
    && git clone https://git.ti.com/cgit/rpmsg/ti-rpmsg-char \
    && cd ti-rpmsg-char \
    && aclocal \
    && autoreconf -i \
    && ./configure --prefix=/usr/local \
    && make \
    && make install \
    && echo .

WORKDIR /opt
RUN echo . \
    && git clone https://github.com/TexasInstruments/edgeai-tidl-tools \
    && cd edgeai-tidl-tools \
    && /bin/bash -c "source ./setup.sh --skip_arm_gcc_download" \
    && echo .

RUN touch .

COPY /tivision_apps.tar.xz /opt/
RUN tar xf /opt/tivision_apps.tar.xz --skip-old-files -C /

COPY /rtos_dlr.tar.xz /opt/
RUN tar xf /opt/rtos_dlr.tar.xz --skip-old-files -C /
RUN ln -s /usr/lib/python3.8/site-packages/libdlr.so /lib/

#WORKDIR /root/src
#RUN echo . \
    #&& rm -rf neo-ai-dlr \
    #&& git clone --branch tidl-j7-fixups https://github.com/jadonk/neo-ai-dlr \
    #&& cd neo-ai-dlr \
    #&& git submodule update --init --recursive \
    #&& mkdir -p build \
    #&& cd build \
    #&& cmake -DUSE_TIDL=ON -DUSE_TIDL_RT_PATH=/root/neo-ai-dlr .. \
    #&& make \
    #&& make install \
    #&& echo .

WORKDIR /root/src
RUN echo . \
    && git clone --branch main https://github.com/TexasInstruments/edgeai-tiovx-modules.git \
    && cd edgeai-tiovx-modules \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make -j1 \
    && make install \
    && echo .

WORKDIR /root/src
RUN echo . \
    && git clone --branch fix/pkgconfig-imaging-sdk-update https://github.com/TexasInstruments/edgeai-gst-plugins.git \
    && cd edgeai-gst-plugins \
    && meson build --prefix=/usr -Dpkg_config_path=pkgconfig \
    && ninja -C build \
    && ninja -C build install \
    && ldconfig \
    && rm -rf /root/src/edgeai-gst-plugins

WORKDIR /opt
RUN echo . \
    && git clone https://git.ti.com/git/edgeai/edge_ai_apps \
    && git clone https://git.ti.com/git/processor-sdk-vision/jacinto_ros_perception.git robotics_sdk \
    && cd /opt/robotics_sdk \
    && ./init_setup.sh \
    && ln -s /root/src/model_zoo /opt/model_zoo \
    && echo .

WORKDIR /root
RUN echo . \
    && echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile \
    && echo "    # include .bashrc if it exists"    >> .profile \
    && echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile \
    && echo "        . \"$HOME/.bashrc\""           >> .profile \
    && echo "    fi"                                >> .profile \
    && echo "fi"                                    >> .profile \
    && echo "#!/bin/bash"                           >  .bashrc  \
    && echo ". /opt/ros/foxy/setup.bash"            >> .bashrc \
    && echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@j7-docker:\w\$ \"" >> .bashrc \
    && echo .

# workdir for ROS apps
ARG PROJECT_HOME=j7ros_home
ENV WORK_DIR=/root/${PROJECT_HOME}
ENV ROS_WS=${WORK_DIR}/ros_ws
WORKDIR ${ROS_WS}

# change the DDS implementation to Cyclone DDS
ENV RMW_IMPLEMENTATION rmw_cyclonedds_cpp

WORKDIR /root/src
RUN git clone --depth 1 --single-branch -b master  https://git.ti.com/git/jacinto-linux/meta-psdkla.git

RUN echo . \
    && python3 -m pip install \
        numpy \
        pybind11 \
    && apt install -y --no-install-recommends \
        clang-10 \
        libtinfo-dev \
        software-properties-common lsb-release \
    && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - > /etc/apt/trusted.gpg.d/kitware.gpg \
    && apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
    && apt install kitware-archive-keyring \
    && apt update && apt upgrade -y \
    && echo .

WORKDIR /root/neo-ai-dlr
RUN patch -p1 <<EOF
 diff --git a/CMakeLists.txt b/CMakeLists.txt
index f2c333c..df3586a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,8 @@ include(cmake/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/FindCUDA.cmake)

+set(THREADS_HAVE_PTHREAD_ARG ON)
+
 # Option for Android on Arm --- has to come before project() function
 option(ANDROID_BUILD "Build for Android target" OFF)
 option(AAR_BUILD "Build Android Archive (AAR)" OFF)
EOF

RUN echo . \
    && git submodule update --init --recursive \
    && mkdir -p build \
    && cd build \
    && cmake -DUSE_TESTS=OFF -DUSE_TIDL_RT_PATH=/root/src/meta-psdkla/recipes-core/packagegroups/neo-ai-tvm/ -DUSE_TIDL=ON .. \
    && echo .

#RUN echo . \
    #&& cd build \
    #&& make \
    #&& make install \
    #&& echo .

#RUN echo . \
    #&& cd python \
    #&& python3 setup.py install \
    #&& echo .
 
RUN apt-get install -y \
    python3 \
    python3-dev \
    python3-numpy \
    python3-opencv \
    python3-pip && \
    pip3 install \
        pycparser \
        streamlit \
        plotly==5.1.0 \
        jupyterlab \
        meson \
        PyYAML \
        Dlr && \
    pip3 install --extra-index-url https://google-coral.github.io/py-repo/ tflite_runtime

WORKDIR /opt
RUN echo . \
    && wget https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/08_01_00_11/exports/ti-processor-sdk-rtos-j721e-evm-08_01_00_11.tar.gz \
    && tar xf ti-processor-sdk-rtos-j721e-evm-08_01_00_11.tar.gz \
    && rm /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11.tar.gz \
    && echo .

#RUN echo . \
    #&& cd /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11 \
    #&& /bin/bash ./psdk_rtos/scripts/setup_psdk_rtos.sh --skip_sudo \
    #&& cd glew-2.0.0 \
    #&& make install \
    #&& cd /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11/vision_apps \
    #&& BUILD_EMULATION=no BUILD_TARGET_MODE=yes BUILD_LINUX_A72=yes BUILD_EDGEAI=yes PROFILE=release make all -j2 \
    #&& BUILD_EMULATION=no BUILD_TARGET_MODE=yes BUILD_LINUX_A72=yes BUILD_EDGEAI=yes PROFILE=release make linux_fs_stage \
    #&& echo .

#WORKDIR /opt/edge_ai_apps
#RUN echo . \
#    && ./setup_script.sh \
#    && echo .

COPY /ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh /opt/
RUN echo . \
    && chmod +x ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
    && ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
    && rm ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
    && echo .
RUN echo . \
    && wget https://software-dl.ti.com/codegen/esd/cgt_public_sw/C6000/8.3.11/ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
    && chmod +x ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
    && ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
    && rm ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
    && echo .


WORKDIR /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11
RUN echo . \
	&& wget https://git.yoctoproject.org/cgit/cgit.cgi/opkg-utils/snapshot/opkg-utils-master.tar.gz \
	&& tar xf opkg-utils-master.tar.gz \
	&& rm opkg-utils-master.tar.gz \
	&& echo .

RUN echo . \
	&& wget https://github.com/g-truc/glm/releases/download/0.9.8.0/glm-0.9.8.0.zip --no-check-certificate \
	&& unzip glm-0.9.8.0.zip > /dev/null \
	&& rm glm-0.9.8.0.zip \
	&& echo .

RUN echo . \
	&& wget https://sourceforge.net/projects/glew/files/glew/2.0.0/glew-2.0.0.zip/download --no-check-certificate \
	&& mv download glew-2.0.0.zip \
	&& unzip glew-2.0.0.zip > /dev/null \
	&& rm glew-2.0.0.zip \
	&& cd glew-2.0.0 \
	&& make > /dev/null \
	&& make install \
	&& echo .

RUN echo . \
	&& pip install pycrypto pycryptodomex \
	&& echo .

RUN echo . \
	&& apt install -y llvm clang \
	&& echo .

WORKDIR /opt
RUN echo . \
	&& wget https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.1/clang+llvm-13.0.1-armv7a-linux-gnueabihf.tar.xz \
	&& tar xf clang+llvm-13.0.1-armv7a-linux-gnueabihf.tar.xz \
	&& apt install -y libc6-armhf-cross linux-libc-dev-armhf-cross \
	&& echo .

RUN echo . \
	&& apt install -y qemu-system-x86 \
	&& echo .

RUN echo . \
	&& wget https://releases.bazel.build/5.0.0/release/bazel-5.0.0-dist.zip \
	&& mkdir -p bazel \
	&& cd bazel \
	&& unzip ../bazel-5.0.0-dist.zip \
	&& rm ../bazel-5.0.0-dist.zip \
	&& apt install -y openjdk-11-jdk \
	&& env EXTRA_BAZEL_ARGS="--host_javabase=@local_jdk//:jdk" bash ./compile.sh \
	&& echo .

#WORKDIR /opt/edge_ai_apps
#RUN echo . \
#	&& ./setup_script.sh \
#	&& echo .
#
#RUN echo . \
#	&& cd python \
#	&& python3 setup.py install \
#	&& echo .

WORKDIR /opt/onnxruntime/tidl_demos
RUN echo . \
	&& ./tidl_build.sh \
	&& echo .

WORKDIR /opt/onnxruntime/build/Linux/RelWithDebInfo
RUN echo . \
	&& make install \
	&& echo .

ENV TIDL_PATH=/opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11/tidl_j7_08_01_00_05/
WORKDIR /root
RUN echo . \
	&& wget https://git.ti.com/cgit/jacinto-linux/meta-psdkla/plain/recipes-core/packagegroups/neo-ai-tvm/inc/itidl_rt.h -o /usr/local/include/itidl_rt.h \
	&& git clone --single-branch -b tidl-j7 https://github.com/TexasInstruments/tvm.git \
	&& cd tvm \
	&& git checkout TIDL_PSDK_8.1_UPDATE1 \
	&& git submodule update --init --recursive \
	&& mkdir build \
	&& cd build \
	&& cmake -DUSE_SORT=ON -DUSE_LLVM=llvm-config -DUSE_TIDL=ON -DUSE_TIDL_RT_PATH=${TIDL_PATH}/ti_dl/rt .. \
	&& make -j4 \
	&& make install \
	&& echo .

WORKDIR /opt/tensorflow
RUN echo . \
	&& apt install -y fakeroot dh-make dh-python python3-pybind11 pybind11-dev \
	&& cd tensorflow/lite/tools/make \
	&& ./download_dependencies.sh \
	&& cd /opt/tensorflow \
	&& make -f tensorflow/lite/tools/make/Makefile \
	&& BUILD_DEB=y tensorflow/lite/tools/pip_package/build_pip_package.sh \
	&& echo .

WORKDIR /opt/edge_ai_apps
RUN echo . \
	&& ./setup_script.sh \
	&& echo .

WORKDIR /opt
RUN echo . \
	&& rm -rf /root/src/neo-ai-dlr \
	&& git clone --branch TIDL_PSDK_8.1 https://github.com/TexasInstruments/neo-ai-dlr \
	&& echo .

WORKDIR /opt/neo-ai-dlr
RUN patch -p1 <<EOF
 diff --git a/CMakeLists.txt b/CMakeLists.txt
index f2c333c..df3586a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,8 @@ include(cmake/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/FindCUDA.cmake)

+set(THREADS_HAVE_PTHREAD_ARG ON)
+
 # Option for Android on Arm --- has to come before project() function
 option(ANDROID_BUILD "Build for Android target" OFF)
 option(AAR_BUILD "Build Android Archive (AAR)" OFF)
EOF

RUN echo . \
	&& git submodule update --init --recursive \
	&& echo .

RUN echo . \
	&& ln -s /root/tvm /opt/tvm \
	&& mkdir build \
	&& cd build \
	&& cmake -DUSE_TESTS=OFF -DUSE_TIDL_RT_PATH=/root/src/meta-psdkla/recipes-core/packagegroups/neo-ai-tvm/ -DUSE_TIDL=ON .. \
	&& make -j4 \
	&& make install \
	&& echo .

RUN echo . \
	&& cd python \
	&& python3 setup.py install \
	&& echo .

RUN echo . \
	&& dpkg -i /opt/tensorflow/tensorflow/lite/tools/pip_package/gen/tflite_pip/python3-tflite-runtime_2.4.0-1_arm64.deb \
	&& echo .

FROM ubuntu-tiros-foxy AS tisdk-minimal
RUN echo . \
	&& rm /opt/clang+llvm-13.0.1-armv7a-linux-gnueabihf.tar.xz \
	&& rm -rf /opt/clang+llvm-13.0.1-armv7a-linux-gnueabihf \
	&& rm -rf /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11 \
	&& rm -rf /opt/bazel \
	&& rm -rf /opt/tensorflow \
	&& rm -rf /root/tensorflow \
	&& rm -rf /opt/onnxruntime \
	&& rm -rf /root/onnxruntime \
	&& rm -rf /opt/neo-ai-dlr \
	&& rm -rf /root/neo-ai-dlr \
	&& rm -rf /root/tvm \
	&& rm -rf /opt/tivision_apps.tar.xz \
	&& rm -rf /opt/rtos_dlr.tar.xz \
	&& echo .

