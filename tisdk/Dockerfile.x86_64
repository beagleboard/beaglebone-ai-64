ARG USE_PROXY
ARG HTTP_PROXY
ARG REPO_LOCATION
ARG DEBIAN_FRONTEND=noninteractive

#=========================================================================
FROM ${REPO_LOCATION}ubuntu:20.04 AS base-0

#=========================================================================
FROM base-0 AS base-1
ARG USE_PROXY
ENV USE_PROXY=${USE_PROXY}
ARG HTTP_PROXY
ENV http_proxy=${HTTP_PROXY}
ENV https_proxy=${HTTP_PROXY}

#=========================================================================
FROM base-${USE_PROXY} AS ubuntu-stage1
ARG DEBIAN_FRONTEND

# setup proxy settings
RUN mkdir -p /opt/scripts
ADD setup_proxy.sh /opt/scripts
RUN /opt/scripts/setup_proxy.sh
#=========================================================================
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

RUN echo . \
    && dpkg --add-architecture i386 \
    && apt update && apt upgrade -y \
    && apt install -y --no-install-recommends \
    wget \
    ca-certificates \
    xz-utils \
    libpng-dev \
    zlib1g-dev \
    libtiff-dev \
    libsdl2-dev \
    libsdl2-image-dev \
    graphviz \
    graphviz-dev \
    build-essential \
    libxmu-dev \
    libxi-dev \
    libgl-dev \
    libosmesa-dev \
    python3 \
    python3-pip \
    curl \
    libz1:i386 \
    libc6-dev-i386 \
    libc6:i386 \
    libstdc++6:i386 \
    g++-multilib \
    git \
    diffstat \
    texinfo \
    gawk \
    chrpath \
    libfreetype6-dev \
    mono-runtime \
    flex \
    libssl-dev \
    u-boot-tools \
    libdevil-dev \
    bison \
    python3-pyelftools \
    python3-dev \
    libx11-dev \
    unzip \
    libncurses5 \
    && rm -rf /var/lib/apt/lists/*

ARG PSDK_LINUX_VER
ARG PSDK_RTOS_VER
WORKDIR /opt
RUN echo . \
    && wget https://software-dl.ti.com/jacinto7/esd/processor-sdk-linux-jacinto7/${PSDK_LINUX_VER}/exports/ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}-Linux-x86-Install.bin \
    && chmod +x ./ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}-Linux-x86-Install.bin \
    && ./ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}-Linux-x86-Install.bin \
    && rm /opt/ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}-Linux-x86-Install.bin \
    && wget https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/${PSDK_RTOS_VER}/exports/ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}.tar.gz  \
    && tar xf ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}.tar.gz \
    && rm ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}.tar.gz \
    && cd ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}/ \
    && ln -s /opt/ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}/board-support/prebuilt-images/boot-j7-evm.tar.gz \
    && ln -s /opt/ti-processor-sdk-linux-j7-evm-${PSDK_LINUX_VER}/filesystem/tisdk-default-image-j7-evm.tar.xz \
    && echo .

WORKDIR /opt
RUN echo . \
    && cd /opt/ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}/psdk_rtos \
    && cd /opt/ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER} \
    && /bin/bash ./psdk_rtos/scripts/setup_psdk_rtos.sh --skip_sudo \
    && cd glew-2.0.0 \
    && make install \
    && echo .

WORKDIR /opt
RUN echo . \
    && cd /opt/ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}/vision_apps \
    && BUILD_EMULATION=no BUILD_TARGET_MODE=yes BUILD_LINUX_A72=yes BUILD_EDGEAI=yes PROFILE=release make all -j2 \
    && BUILD_EMULATION=no BUILD_TARGET_MODE=yes BUILD_LINUX_A72=yes BUILD_EDGEAI=yes PROFILE=release make linux_fs_stage \
    && cd /tmp/tivision_apps_targetfs_stage \
    && tar cJf /opt/tivision_apps.tar.xz . \
    && cd \
    && rm -rf /tmp/tivision_apps_targetfs_stage \
    && cd /opt/ti-processor-sdk-rtos-j721e-evm-${PSDK_RTOS_VER}/targetfs \
    && tar cJf /opt/rtos_dlr.tar.xz `find . | grep dlr` \
    && echo .


WORKDIR /root
RUN echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile && \
    echo "    # include .bashrc if it exists"    >> .profile && \
    echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile && \
    echo "        . \"$HOME/.bashrc\""           >> .profile && \
    echo "    fi"                                >> .profile && \
    echo "fi"                                    >> .profile && \
    echo "#!/bin/bash"                           >  .bashrc  && \
    echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@pc-docker:\w\$ \"" >> .bashrc

RUN echo "#!/bin/sh" >  setup_proxy.sh \
    && echo "" >> setup_proxy.sh \
    && chmod +x setup_proxy.sh \
    && echo .

ENV WORK_DIR=/root/${HOME}

