# syntax=docker/dockerfile:1.3-labs
FROM ubuntu:20.04 AS ubuntu-tiros-foxy
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_DISTRO=foxy
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

RUN echo . \
	&& echo 'Etc/UTC' > /etc/timezone \
	&& ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime \
	&& apt update \
	&& apt install -y --no-install-recommends \
		gnupg2 \
		ca-certificates \
		curl \
		wget \
		software-properties-common lsb-release \
	&& apt upgrade -y \
	&& echo "deb http://packages.ros.org/ros2/ubuntu focal main" > /etc/apt/sources.list.d/ros2-latest.list \
	&& curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | apt-key add - \
	&& wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - > /etc/apt/trusted.gpg.d/kitware.gpg \
	&& apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" \
	&& apt install kitware-archive-keyring \
	&& apt update && apt upgrade -y \
	&& apt install -y --no-install-recommends \
		tzdata \
		libdevil-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev \
		libgstreamer1.0-0 \
		libgstreamer1.0-dev \
		libgstreamer-plugins-base1.0-dev \
		libgstreamer-plugins-good1.0-dev \
		gstreamer1.0-plugins-base \
		gstreamer1.0-plugins-good \
		gstreamer1.0-plugins-bad \
		gstreamer1.0-libav \
		gstreamer1.0-tools \
		gir1.2-gst-rtsp-server-1.0 \
		ninja-build \
		dirmngr \
		build-essential \
		git \
		vim \
		nano \
		tmux \
		tilix \
		gdb \
		iputils-ping \
		usbutils \
		ncurses-dev \
		libyaml-cpp-dev \
		rsync \
		strace \
		sysstat \
		gdb \
		net-tools \
		dialog \
		chrony \
		nfs-common \
		corkscrew \
		v4l-utils \
		unzip \
		libsm6 \
		libxext6 \
		libxrender1 \
		libprotobuf-dev \
		protobuf-compiler \
		libprotoc-dev \
		graphviz \
		swig \
		curl \
		zip \
		pkg-config \
		libgtk-3-dev \
		libyaml-cpp-dev \
		autotools-dev \
		autoconf \
		automake \
		libtool \
		llvm clang \
		llvm-dev \
		qemu-system-x86 \
		cmake \
		clang-10 \
		libtinfo-dev \
		libc6-armhf-cross linux-libc-dev-armhf-cross \
		openjdk-11-jdk \
		fakeroot dh-make dh-python \
		ros-foxy-ros-base=0.9.2-1* \
		ros-foxy-rmw-cyclonedds-cpp \
		ros-foxy-cv-bridge \
		ros-foxy-image-transport \
		ros-foxy-camera-info-manager \
		libeigen3-dev \
		python3-pybind11 pybind11-dev \
		python3-opencv \
		python3-colcon-common-extensions \
		python3-colcon-mixin \
		python3-rosdep \
		python3-vcstool \
		python3-pip \
		python3-dev \
		python3-numpy \
	&& python3 -m pip install --upgrade pip \
	&& python3 -m pip install \
		rosbags \
		meson \
		configparser \
		argparse \
		numpy \
		pybind11 \
		pycparser \
		streamlit \
		plotly==5.1.0 \
		jupyterlab \
		PyYAML \
		Dlr \
		pycrypto \
		pycryptodomex \
	&& echo .

####################
# TI compiler tools
####################
COPY /ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh /opt/
WORKDIR /opt
RUN echo . \
	&& chmod +x ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& rm ./ti_cgt_c7000_2.1.0.LTS_armlinuxaarch64_busybox_installer.sh \
	&& wget https://software-dl.ti.com/codegen/esd/cgt_public_sw/C6000/8.3.11/ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& chmod +x ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& rm ./ti_cgt_c6000_8.3.11_armlinuxa8hf_busybox_installer.sh \
	&& echo .

######
# ROS
######
RUN echo . \
	&& rosdep init \
	&& rosdep update --rosdistro ${ROS_DISTRO} \
	&& colcon mixin add default \
		https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml \
	&& colcon mixin update \
	&& colcon metadata add default \
		https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml \
	&& colcon metadata update \
	&& echo .

################
# ti-rpmsg-char
################
WORKDIR /opt
RUN echo . \
	&& git clone https://git.ti.com/cgit/rpmsg/ti-rpmsg-char \
	&& cd ti-rpmsg-char \
	&& aclocal \
	&& autoreconf -i \
	&& ./configure --prefix=/usr/local \
	&& make \
	&& make install \
	&& rm -rf /opt/ti-rpmsg-char \
	&& echo .

############
# Linux SDK
############


###########
# RTOS SDK
###########
WORKDIR /opt
COPY /tivision_apps.tar.xz /opt/
RUN tar xf /opt/tivision_apps.tar.xz --skip-old-files -C /

RUN echo . \
	&& wget https://software-dl.ti.com/jacinto7/esd/processor-sdk-rtos-jacinto7/08_01_00_13/exports/ti-processor-sdk-rtos-j721e-evm-08_01_00_13.tar.gz \
	&& tar xf ti-processor-sdk-rtos-j721e-evm-08_01_00_13.tar.gz \
	&& rm /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_13.tar.gz \
	&& cd ti-processor-sdk-rtos-j721e-evm-08_01_00_13 \
	&& wget https://git.yoctoproject.org/cgit/cgit.cgi/opkg-utils/snapshot/opkg-utils-master.tar.gz \
	&& tar xf opkg-utils-master.tar.gz \
	&& rm opkg-utils-master.tar.gz \
	&& echo .

RUN echo . \
	&& git clone --depth 1 --single-branch -b master https://git.ti.com/git/jacinto-linux/meta-psdkla.git \
	&& cp /opt/meta-psdkla/recipes-core/packagegroups/neo-ai-tvm/inc/itidl_rt.h /usr/local/include/itidl_rt.h \
	&& echo .

RUN echo . \
	&& wget https://github.com/g-truc/glm/releases/download/0.9.8.0/glm-0.9.8.0.zip --no-check-certificate \
	&& unzip glm-0.9.8.0.zip > /dev/null \
	&& rm glm-0.9.8.0.zip \
	&& echo .

RUN echo . \
	&& wget https://sourceforge.net/projects/glew/files/glew/2.0.0/glew-2.0.0.zip/download --no-check-certificate \
	&& mv download glew-2.0.0.zip \
	&& unzip glew-2.0.0.zip > /dev/null \
	&& rm glew-2.0.0.zip \
	&& cd glew-2.0.0 \
	&& make > /dev/null \
	&& make install \
	&& echo .

######
# TVM
######
ENV TIDL_PATH=/opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_13/tidl_j7_08_01_00_05/
WORKDIR /opt
RUN echo . \
	&& git clone --single-branch -b tidl-j7 https://github.com/TexasInstruments/tvm.git \
	&& cd tvm \
	&& git checkout TIDL_PSDK_8.1_UPDATE1 \
	&& git submodule update --init --recursive \
	&& mkdir build \
	&& cd build \
	&& cmake -DUSE_SORT=ON -DUSE_LLVM=llvm-config -DUSE_TIDL=ON -DUSE_TIDL_RT_PATH=${TIDL_PATH}/ti_dl/rt .. \
	&& make -j4 \
	&& make install \
	&& echo .

RUN echo . \
	&& git clone --branch TIDL_PSDK_8.1 https://github.com/TexasInstruments/neo-ai-dlr \
	&& echo .

WORKDIR /opt/neo-ai-dlr
RUN patch -p1 <<EOF
 diff --git a/CMakeLists.txt b/CMakeLists.txt
index f2c333c..df3586a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,8 @@ include(cmake/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/Utils.cmake)
 include(3rdparty/tvm/cmake/utils/FindCUDA.cmake)

+set(THREADS_HAVE_PTHREAD_ARG ON)
+
 # Option for Android on Arm --- has to come before project() function
 option(ANDROID_BUILD "Build for Android target" OFF)
 option(AAR_BUILD "Build Android Archive (AAR)" OFF)
EOF

RUN echo . \
	&& git submodule update --init --recursive \
	&& echo .

######
# TFL
######
ENV FLATBUFFERS_VERSION=v1.12.0
WORKDIR /opt
RUN echo . \
	&& git clone --single-branch --branch tidl-j7 --depth 1 https://github.com/TexasInstruments/tensorflow.git \
	&& cd tensorflow \
	&& mkdir -p tensorflow/lite/tools/make/downloads \
	&& cd tensorflow/lite/tools/make/downloads \
	&& wget https://github.com/google/flatbuffers/archive/${FLATBUFFERS_VERSION}.tar.gz \
	&& tar xf ${FLATBUFFERS_VERSION}.tar.gz \
	&& mv flatbuffers-* flatbuffers \
	&& rm -rf ${FLATBUFFERS_VERSION}.tar.gz \
	&& echo .

RUN echo . \
	&& python3 -m pip install --extra-index-url https://google-coral.github.io/py-repo/ tflite_runtime \
	&& echo .

RUN echo . \
	&& cd tensorflow/tensorflow/lite/tools/make \
	&& ./download_dependencies.sh \
	&& cd /opt/tensorflow \
	&& make -f tensorflow/lite/tools/make/Makefile \
	&& BUILD_DEB=y tensorflow/lite/tools/pip_package/build_pip_package.sh \
	&& dpkg -i /opt/tensorflow/tensorflow/lite/tools/pip_package/gen/tflite_pip/python3-tflite-runtime_2.4.0-1_arm64.deb \
	&& echo .

#######
# ONNX
#######
ENV PROTOBUF_VER=3.11.3
ENV ZIP_FILE=protoc-${PROTOBUF_VER}-linux-aarch_64.zip
WORKDIR /opt
RUN echo . \
	&& git clone --single-branch --branch tidl-j7 --depth 1 https://github.com/TexasInstruments/onnxruntime.git \
	&& echo .

RUN echo . \
	&& cd onnxruntime \
	&& wget https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VER}/${ZIP_FILE}\
	&& unzip ${ZIP_FILE} -d cmake/external/protoc-${PROTOBUF_VER}-linux-aarch_64 \
	&& echo .

RUN cat > ./onnxruntime/tool.cmake <<EOF
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_PROCESSOR aarch64)
SET(CMAKE_SYSTEM_VERSION 1)
SET(CMAKE_C_COMPILER /usr/bin/aarch64-linux-gnu-gcc)
SET(CMAKE_CXX_COMPILER /usr/bin/aarch64-linux-gnu-g++)
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOF

RUN echo . \
	&& cd onnxruntime \
	&& ./build.sh --parallel $NPROC \
		--skip_tests \
		--enable_onnx_tests \
		--build_shared_lib \
		--config Release \
		--cmake_extra_defines="CMAKE_TOOLCHAIN_FILE=$(pwd)/tool.cmake" \
		--path_to_protoc_exe $(pwd)/cmake/external/protoc-${PROTOBUF_VER}-linux-aarch_64/bin/protoc \
		--use_tidl \
		--build_wheel \
	&& python3 -m pip install build/Linux/Release/dist/onnxruntime_tidl-1.7.0-cp38-cp38-linux_aarch64.whl \
	&& cd /opt/onnxruntime/build/Linux/Release \
	&& make install \
	&& echo .

##############
# Edge AI SDK
##############
WORKDIR /opt
RUN echo . \
	&& git clone https://git.ti.com/git/edgeai/edge_ai_apps \
	&& ./edge_ai_apps/download_models.sh --recommended \
	&& echo .

RUN echo . \
	&& git clone --branch main https://github.com/TexasInstruments/edgeai-tiovx-modules.git \
	&& cd edgeai-tiovx-modules \
	&& mkdir build \
	&& cd build \
	&& cmake .. \
	&& make -j1 \
	&& make install \
	&& ln -s /usr/lib/edgeai-tiovx-modules/libedgeai-tiovx-modules.so /usr/local/lib/ \
	&& ln -s /usr/lib/edgeai-tiovx-modules/libedgeai-tiovx-modules.so.0.1.0 /usr/local/lib/ \
	&& ldconfig \
	&& echo .

WORKDIR /opt
RUN echo . \
	&& git clone --branch fix/pkgconfig-imaging-sdk-update https://github.com/TexasInstruments/edgeai-gst-plugins.git \
	&& cd edgeai-gst-plugins \
	&& meson build --prefix=/usr/local -Dpkg_config_path=pkgconfig \
	&& ninja -C build \
	&& ninja install \
	&& echo .

###############
# Robotics SDK
###############
WORKDIR /opt
RUN echo . \
	&& git clone https://git.ti.com/git/processor-sdk-vision/jacinto_ros_perception.git robotics_sdk \
	&& cd /opt/robotics_sdk \
	&& ./init_setup.sh \
	&& echo .

##############
# Environment
##############
WORKDIR /root
RUN echo . \
    && echo "if [ -n \"$BASH_VERSION\" ]; then"     >  .profile \
    && echo "    # include .bashrc if it exists"    >> .profile \
    && echo "    if [ -f \"$HOME/.bashrc\" ]; then" >> .profile \
    && echo "        . \"$HOME/.bashrc\""           >> .profile \
    && echo "    fi"                                >> .profile \
    && echo "fi"                                    >> .profile \
    && echo "#!/bin/bash"                           >  .bashrc  \
    && echo ". /opt/ros/foxy/setup.bash"            >> .bashrc \
    && echo "export PS1=\"${debian_chroot:+($debian_chroot)}\u@j7-docker:\w\$ \"" >> .bashrc \
    && echo .

# workdir for ROS apps
ARG PROJECT_HOME=j7ros_home
ENV WORK_DIR=/root/${PROJECT_HOME}
ENV ROS_WS=${WORK_DIR}/ros_ws
WORKDIR ${ROS_WS}

# change the DDS implementation to Cyclone DDS
ENV RMW_IMPLEMENTATION rmw_cyclonedds_cpp

#FROM ubuntu-tiros-foxy AS tisdk-minimal
#RUN echo . \
#	&& rm -rf /opt/clang+llvm-13.0.1-armv7a-linux-gnueabihf \
#	&& rm -rf /opt/ti-processor-sdk-rtos-j721e-evm-08_01_00_11 \
#	&& rm -rf /opt/bazel \
#	&& rm -rf /opt/tensorflow \
#	&& rm -rf /root/tensorflow \
#	&& rm -rf /opt/onnxruntime \
#	&& rm -rf /root/onnxruntime \
#	&& rm -rf /opt/neo-ai-dlr \
#	&& rm -rf /root/neo-ai-dlr \
#	&& rm -rf /root/tvm \
#	&& rm -rf /opt/tivision_apps.tar.xz \
#	&& rm -rf /opt/rtos_dlr.tar.xz \
#	&& echo .
#

